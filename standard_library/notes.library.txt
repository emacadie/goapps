why use standard library?
prewritten and tested
it will be tested since it's part of Go
will probably not be abandoned



https://golang.org/pkg/

Files we make:
in cli:
showmestuff.go
dosomething.go
dinnertotal.go
flagtest.go
scandemo.go
bufiodemo.go
filemaker.go

in fmt:
scandemo2.go
sscanfdemo.go
scanlndemo.go
printdemo.go
printfdemo.go
errormessages.go
printstuff.go

in log:

It is interesting that all the functions in standard library start with capital letters, and are usually NOT verbs.


https://golang.org/pkg/fmt/
fmt:
Println adds a return at the end
Print does not

This guy jumps around, reuses blows away what's in his file and does something different, pastes text without warning.
I don't like this guy at all.

Now to module 3
fmt package
formats input and output

Sscanf: handles input, like printf handles output
scanln: scans a line

printf format specifiers
%v - default
%s - string
%d - decimal integers
%g - floating point
%b - base 2 numbers
%o - base 8 numbers
%t - true or false
(This guy had "base 22" and "base 88". I am starting to lose confidence. Maybe they shouldn't let .NET people talk about Go.)
And he is blowing away the contents of a file AGAIN.
Sprintf can be used to put formatted output into a variable (such as for a file or web app)

logging error levels:
Why don't log frameworks use names AND numbers? Then there is no doubt about the order
Information - something to know
Warning - more serious
Error - something really bad
Fatal - you need to stop
Log4J also has debug

info:
when to use: 
if you want to confirm something, 
logging transactions
keeping track of something (finite resources)
show runtime info (OS, memory)
when not to use:
serious condition
something misconfigured
anything that compromises operation

warning:
when to use:
you need user's attention
something misconfigured
when not to use:
operation is compromised (failure to connect to DB)
something that could cause program to fail

error:
when to use:
operation is compromised (open a file, connect to DB)
something unexpected happened
when not to use:
program must be shut down

fatal:
when to use:
when program must exit
when not to use:
program can keep going

debug messages:
these are for developers
do not put in release artifacts
useful for testing

log.Println( "This is our message" )
gives:
2020/08/23 14:13:31 This is our message
Can we change the date format?

why log things?
if something goes wrong, you will want to know why
spot bugs in code
discover config issues
investigate performance problems (need timestamps)
log unusual events, error levels, config settings, telemetry information

what not to log:
PII, credential info, financial info (account numbers, transaction amounts), IP addresses

use error levels to your advantage, being as verbose or concise as you like

To read trace.out file:
go tool trace trace.out 
Which gives this:
2020/08/23 16:25:16 Parsing trace...
2020/08/23 16:25:16 Splitting trace...
2020/08/23 16:25:16 Opening browser. Trace viewer is listening on http://127.0.0.1:46391
Then you can look at it in the browser.

You generally do not do these too often in production

I think I need some executables on my system to look at these

files:
outfirstlog.go
secondlog.go
tracethis.go

time package
We will may-shure time

wall clock, monotonic time
wall clock: time of day provided by OS
Subject to variation (leap years, time zones), can be set by NTP
great for humans
not great for measuring time
monotonic time: like a stop watch, used to may-shure time
not subject to variation
only meaningful for process calling it

stop saying "may-shure"
You could measure something with wall clock
But what if there is an NTP update while measuring?

time.Now() gives both:
Here is the time:  2020-08-23 18:21:34.371775268 -0500 CDT m=+0.000060168
time.Now() returns a struct:
time.Year()
time.Month()
time.Day()

You can make your own format, but according to https://golang.org/pkg/time/ you must use 
"Mon Jan 2 15:04:05 MST 2006" as your base.
I am not clear why.
And yes, if you change one of the values you will get the incorrect date.

files:
showtime.go
time.go
simpleapp.go

When I tried to create "time.go" with c-x c-f or find-file or switch-to-buffer
the completion kept picking showtime.go (since that matches filter "time.go")
find-alternate-file did the trick
Then I had to re-open "showtime.go"

