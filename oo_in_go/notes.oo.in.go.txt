Object-oriented Programming in Go


in /home/ericm/github/goapps/oo_in_go/gopherpay (just above src)
export GOPATH=$(pwd):$GOPATH
go run src/shelfunit.info/gopherpay/client/procedural/main.go
go run src/shelfunit.info/gopherpay/client/objectoriented/main.go    
go run src/shelfunit.info/gopherpay/client/main.go
go run src/shelfunit.info/gopherpay/client/try_channels.go 
go run src/shelfunit.info/gopherpay/client/embed_this.go 
go run src/shelfunit.info/gopherpay/client/resolve_this.go 


So one problem w/structs is: How to do data validation?
Plus with the payments, we have to know if they are using cash, checks or credit.
Procedural just have functions and data structures


Less to do in objectoriented/main.go, client needs to remember less

What is object-oriented programming?
Compose applications of objects that interact to deliver behaviors
An object could have some data. Methods are on the edge, exposed to other methods, hiding data.

+------ Methods -----+
|                    |
|        Data        |
|                    |
+--------------------+

Objects interact with world through methods.
That is encapsulation: interact through methods, no idea of details
Message passing: let object determine how to interpret message, or if it does anything at all (sounds like actors)
Inheritance: Not really in Go (my guess is they use composition)
Polymorphism: multiple types that can stand in for a common type (like cash, check, credit for payments)

We can have oo without forcing getters and setters.
You get a lot of boilerplate.

Go is not a class and object language
Go does not have private data
Go does not have inheritance
Go does not have abstract data types (but we can do interfaces)

We do have methods. We can attach functions to data structures.
We have package oriented design.
We have type embedding
We have interfaces (this will be big)

Encapsulation:
Accessing a service on an object without knowing how it is implemented
Not necessarily getters and setters
But being able to verify data in a setter is nice.
A lot of programmers just do blind setters.

Encapsulation in Go: 
Challenges: no classes or private data
Strategies: We have interfaces and package oriented design

Package oriented design:
package payment
type CreditAccount struct {
     accountNumber string
     accountOwner string
     // availableCredit float32 // I think he forgot this one
}
func (c CreditAccount) AccountNumber() string
func (c CreditAccount) AccountOwner() string
func (c CreditAccount) AvailableCredit() float32

Naming conventions: Accessor methods have same name as the field you are getting, w/method starting with capital letter
Do not overuse this
Another data structure in same package will be able to access CreditAccount's fields
But other packages will not be able to get data directly, must use accessors
Treat packages as lowest organizational unit

Interfaces:

package payment
type creditAccount{} // only in package
// even other parts in package cannot get to it
func (c CreditAccount) AccountNumber() string
func (c CreditAccount) AvailableCredit() float32

// to make it available, make a PaymentOption
// it will define accessor methods to get to creditAccount data\
// interface can only expose methods, or behaviors, it cannot expose data
type PaymentOption interface {
     AccountNumber() string
     AvailableCredit() float32
}
// but how to create it?

Message passing: Like actors?
Message passing: sending a message to an object, but letting that object determine what to do with it
(Can you tell an object how to handle a function?)
It is kind of like actors.
Sender sends message to receiver, and receiver decides

Strategies for message passing: Interfaces and channels

Interfaces:
Example: 
type PaymentOption interface {
     ProcessPayment(float32) bool
}
type CashAccount struct {}
func (c *CashAccount) ProcessPayment(amount float32) bool {
     return true
}

type CreditAccount struct { .. }
func (c *CreditAccount) ProcessPayment(amount float32) bool { .. }

Message passing is not calling creating a CashAccount and calling ProcessPayment on it
But:
var paymentOption PaymentOption
paymentOption = &CashAccount{}
ok := paymentOption.ProcessPayment(500)
this is message passing
Then we can do this:
paymentOption = &CreditAccount{ ... }
ok = paymentOption.ProcessPayment( 500 )

Channels:
type CreditAccount struct { ... }
// package scope
func (c *CreditAccount) processPayment(amount float32) { ... }
// constructor that takes a channel
func CreateCreditAccount(chargeCh chan float32) *CreditAccount {
     creditAccount := &CreditAccount{ ... }
     // using same channel
     go func(chargeCh chan float32) {
        for amount := range chargeCh {
            creditAccount.processPayment(amount)
        }
     } (chargeCh)
     return creditAccount
}
// why call processPayment in the constructor?
// consumer:
chargeCh := make(chan float32)
account := CreateCreditAccount(chargeCh)
// now we charge
chargeCh <- 500
// so when do you process a payment for an existing account?
// and where do you get the account number from?

Composition replaces inheritance
Inheritance: behavior reuse strategy where a type is based on another type, so functionality is inherited.
Bird is-an animal.
Composition: behavior reuse strategy where a type contains objects with the desired functionality. The type delegates calls to those objects to use their behaviors.
Car has-an engine.

Inheritance:
Account type has methods AvailableFunds() and ProcessPayment()
CreditCard can extend Account, and have RequestCreditLimitChange()

Issues w/inheritance:
tightly couples parent and child
hard to debug and maintain
all or nothing: some have single-inheritance system
There is no inheritance in Go

Account type has methods AvailableFunds() and ProcessPayment()
CreditCard can have RequestCreditLimitChange() and have an Account type embedded inside it
It can have an AvailableFunds() method and ProcessPayment() method, and delegate to the Account inside it

AKA Type embedding

type Account struct { ... }
func (a *Account) AvailableFunds() float32 { ... }
func (a *Account) ProcessPayment(amount float32) bool { ... }

type CreditAccount struct {
     Account // notice we just have the type
}

ca := &CreditAccount{}
funds := ca.AvailableFunds()


Resolving conflicts:
what if you have multiple funcs with same name? Sort of like diamond problem

type CreditAccount struct { ... }
func (c *CreditAccount) AvailableFunds() float32 { ... }
type CheckingAccount struct { ... }
fund (c *CheckingAccount) AvailableFunds() float32 { ... }
type HybridAccount struct {
     CreditAccount
     CheckingAccount
}
What happens when we call HybridAccount.AvailableFunds()?
Bad things, man. We have to implement it on HybridAccount:
func (h *HybridAccount) AvailableFunds() float32 {
     return h.CreditAccount.AvailableFunds() + h.CheckingAccount.AvailableFunds()
}
// could we just call one?





