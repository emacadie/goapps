Web services in Go.

We can run this with: go run main.go
We can run the Angular app with: in root of Angular app: ng serve --open
Runs at http://localhost:4200/home

inventory-mgmt app from Pluralsight tutorial.

Web services: APIs to communicate.
Separate layers of your application.
We will use REST
Client/Server
Requests over HTTP
Uniform resource identifiers (URI) or endpoint.
Request methods:
CONNECT
DELETE
GET
HEAD
OPTIONS
PATCH
POST
PUT
TRACE

Using JSON:
Has strings, numbers, booleans, null/empty
Sometimes XML can also be used.

Every response has a status code.
200: success
300: redirection
400: Client error (like requesting non-exising resource, or badly formed request, or lack of permissions)
500: Server error

Requests are stateless. Service does not have to remember who sent request.
Allows scalability.

Env:
Go, emacs
Postman
MySQL (yuck!) I might use postgres
The web app is Angular, which relies on Node. Yuck.
And it looks like it's in:
02/demos/02/demos/inventory-mgmt/inventory-mgmt/inventory-mgmt
Seriously?
apt installed about 200 packages.

RUNNING ANGULAR APP:
in the root of that project:
npm install -g @angular/cli
I had to do that as root.
I really do not want to learn javascript, or node, or angular. Just Go.
Then run "npm install"
to run app: "ng serve --open"
And now my system is freezing up for a second a LOT.
It finally opens on http://localhost:4200/home
I need a new machine. I need a new life.
in /home/ericm/github/goapps/web_services/inventory-mgmt: "ng serve --open"


Handling HTTP requests:
net/http.Handle function
Registers a handler
net/http.HandleFunc
Registers a function that also handles.
foo := func( a http.ResponseWriter, _ *http.Response ) {
    w.Write( []byte( "Hello world ) )
}
http.HandleFunc( "/foo", foo )
so you can assign a function to a variable and pass it to a function.
So is Go kind of sort of functional?

To listen to request: make a ServeMux (HTTP Request Multiplexor)
Matches URLs to patterns in registered handlers
net/http.ListenAndServe
there is also net/http.ListedAndServeTLS for security

So make a new module:
go mod init shelfunit.info/golang/inventoryservice

http://localhost:5000/foo

JSON:
Look at the encoding/json package
Marshal and Unmarshal functions

HTTP Requests:
Has a method which is a string
A header, which is a map of strings to a slice of strings
Body: type of io.ReadCloser
I have no idea what that is right now.

One handler can handle different methods.
It has to because the servemux just goes by routes.
"if err != nill" is really getting old.

Now we get into dynamic URLs
request.URL
https://golang.org/pkg/net/url/#URL
type URL struct {
    Scheme      string
    Opaque      string    // encoded opaque data
    User        *Userinfo // username and password information
    Host        string    // host or host:port
    Path        string    // path (relative paths may omit leading slash)
    RawPath     string    // encoded path hint (see EscapedPath method); added in Go 1.5
    ForceQuery  bool      // append a query ('?') even if RawQuery is empty; added in Go 1.7
    RawQuery    string    // encoded query values, without '?'
    Fragment    string    // fragment for references, without '#'
    RawFragment string    // encoded fragment hint (see EscapedFragment method); added in Go 1.15
}
We will look at Path


Middleware:
Authentication, Logging, Session management
Functionality before or after our handlers
Wrap handler in an adapter function
http.HandlerFunc allows us to execute code before or after handler
func midddlewareHandler( handler http.Handler ) http.Handler {
     return http.HandlerFunc( func( w http.ResponseWriter, r *http.Request ) {
     // do stuff before intended handler
     handler.ServeHttp( w, r )
     // do stuff after intended handler
} )
  func intendedFunction( w http.ResponseWriter, r *http.Request ) {
  // business logic here
  }
}

func main() {
     intendedHandler := http.HandlerFunc( intendedFunction )
     http.Handle( "/foo", middlewareHandler( intendedHandler ) )
     http.ListenAndServe( ":5000", nil )
}

CORS: Cross-Origin Resource Sharing

Where does the "make" function come from for maps?
It looks like it's in https://golang.org/pkg/builtin/#make
I guess those are like java.lang: No need to qualify


starting module 4, persistence
They are using MySQL, I will use Postgres.

Try postman soon

In the part about web connections. Can't we make a context for products.data.go once, and re-use it?

Look up string tags again

At end of module 5:
writing javascript to test web socket:
in console:
let ws = new WebSocket( "ws://localhost:5000/websocket" )
ws.send(JSON.stringify({data:"test message from browser", type: "test"}))

Templates: Now we are dealing with pipelines
They sound like UNIX pipelines
Ken Thompson strikes again.

Up to 3:34

